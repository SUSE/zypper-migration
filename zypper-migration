#!/usr/bin/ruby

require 'optparse'
require "suse/connect"

class ProductVersion
  include Comparable
  attr :v

  def cmp_array(a1, a2)
    return 0 if a1.length == 0 && a2.length == 0
    first1 = a1.length > 0 ? a1.shift : "0"
    first2 = a2.length > 0 ? a2.shift : "0"

    cmp = first1.to_i <=> first2.to_i
    cmp = cmp_array(a1, a2) if cmp == 0
    return cmp
  end

  def <=>(v2)
    a_ver, a_rel = @v.split("-")
    b_ver, b_rel = v2.v.split("-")
    cmp_array(a_ver.split('.'), b_ver.split('.'))
  end
  def initialize(v)
    @v = v
  end
  def inspect
    @v
  end
end

options = {
    :allow_vendor_change => false,
    :verbose => false,
    :quiet => false,
    :non_interactive => false,
    :query => false,
    :migration => 0,
    :repo => [],
    :from => [],
    :auto_agree => false,
    :debug_solver => false,
    :recommends => true,
    :replacefiles => false,
    :details => false,
    :download => nil
}

OptionParser.new do |opts|
  opts.banner = "Usage: zypper migration [options]"

  opts.on("-v", "--[no-]allow-vendor-change", "Allow vendor change") do |v|
    options[:allow_vendor_change] = v
  end

  opts.on("-v", "--[no-]verbose", "Increase verbosity") do |v|
    options[:verbose] = v
  end

  opts.on("-q", "--[no-]quiet", "Suppress normal output, print only error messages") do |q|
    options[:quiet] = q
  end

  opts.on("-n", "--non-interactive", "Do not ask anything, use default answers automatically") do |n|
    options[:non_interactive] = n
  end

  opts.on("--query", "Query available migration options and exit") do |q|
    options[:query] = q
  end

  opts.on("--disable-repos", "Disable obsolete repositories without asking") do |d|
    options[:disable_repos] = d
  end

  opts.on("--migration N", OptionParser::DecimalInteger, "Select migration option N") do |n|
    options[:migration] = n
  end

  opts.on("--from REPO", "Restrict upgrade to specified repository") do |r|
    options[:from] << r
  end

  opts.on("-r", "--repo REPO", "Load only the specified repository") do |r|
    options[:repo] << r
  end

  opts.on("-l", "--auto-agree-with-licenses", "Automatically say 'yes' to third party license confirmation prompt") do |a|
    options[:auto_agree] = a
  end

  opts.on("--debug-solver", "Create solver test case for debugging") do |a|
    options[:debug_solver] = a
  end

  opts.on("--[no-]recommends", "Install also recommended packages") do |a|
    options[:recommends] = a
  end

  opts.on("--replacefiles", "Install the packages even if they replace files from other packages") do |a|
    options[:replacefiles] = a
  end

  opts.on("--details", "Show the detailed installation summary") do |a|
    options[:details] = a
  end

  opts.on("--download MODE", ["only", "in-advance", "in-heaps", "as-needed"],"Set the download-install mode") do |a|
    options[:download] = a
  end

  opts.on("--download-only", "Only download the packages, do not install") do |d|
    options[:download] = "only" if d
  end

end.parse!


products = SUSE::Connect::Migration::system_products
if options[:verbose]
  print "Installed products:\n"
  products.each {|p|
    printf "  %-25s %s\n", "#{p.identifier}/#{p.version}/#{p.arch}", p.summary
  }
  print "\n"
end

begin
  migrations_all = SUSE::Connect::YaST.system_migrations products
rescue SUSE::Connect::ApiError
  print "API error: #{$!.message}\n"
  exit 1
end

migrations = Array.new
migrations_unavailable = Array.new
migrations_all.each do |migration|
  migr_available = true
  migration.each do |p|
    available = !defined?(p.available) || p.available
    if !available
      migr_available = false
      break
    end
  end
  if migr_available
    migrations << migration
  else
    migrations_unavailable << migration
  end
end

if migrations_unavailable.length > 0 && !options[:quiet]
  print "Unavailable migrations (product is not mirrored):\n"
  migrations_unavailable.each do |migration|
    migration.each do |p|
      available = !defined?(p.available) || p.available
      print " #{p.identifier}/#{p.version}/#{p.arch}" + (available ? "" : "(not available)")
    end
    print "\n"
  end
  print "\n"
end

if migrations.length == 0
  print "No migration available\n\n" unless options[:quiet]
  exit 0
end

migration_num = options[:migration]
if options[:non_interactive] && migration_num == 0
  # select the first option
  migration_num = 1
end


while migration_num <= 0 || migration_num > migrations.length do 
  print "Available migrations:\n\n"
  migrations.each_with_index do |migration, index|
    printf "   %2d |", index + 1
    migration.each do |p|
      print " #{p.identifier}/#{p.version}/#{p.arch}"
    end
    print "\n"
  end
  print "\n"
  if options[:query]
    exit 0
  end
  while migration_num <= 0 || migration_num > migrations.length do
    print "[num/q]: "
    choice = gets.chomp 
    exit 0 if choice.eql?("q") || choice.eql?("Q")
    migration_num = choice.to_i
  end
end

migration = migrations[migration_num - 1]

cmd = "zypper " +
      (options[:non_interactive] ? "--non-interactive " : "") +
      (options[:verbose] ? "--verbose " : "") +
      (options[:quiet] ? "--quiet " : "") +
      " refresh"
print "\nExecuting '#{cmd}'\n\n" unless options[:quiet]
exit 1 unless system cmd

cmd = "zypper " +
      (options[:non_interactive] ? "--non-interactive " : "") +
      (options[:verbose] ? "--verbose " : "") +
      (options[:quiet] ? "--quiet " : "") +
      " update"
print "\nExecuting '#{cmd}'\n\n" unless options[:quiet]
exit 1 unless system cmd

cmd = "snapper create --type pre --print-number --description 'pre migration'"
print "\nExecuting '#{cmd}'\n\n" unless options[:quiet]
pre_snapshot_num = `#{cmd}`.to_i

base_product_version = nil # unknown yet

migration.each do |p|
  print "Upgrading product #{p.identifier}/#{p.version}/#{p.arch}\n" unless options[:quiet]
  service = SUSE::Connect::YaST.upgrade_product p

  if service[:obsoleted_service_name]
    print "Removing service #{service[:obsoleted_service_name]}\n" if options[:verbose]
    SUSE::Connect::Migration::remove_service service[:obsoleted_service_name]
  end

  SUSE::Connect::Migration::find_products(p.identifier).each do |available_product|
    # filter out "(System Packages)" and already disabled repos
    next unless SUSE::Connect::Migration::repositories.detect { |r| r[:name].eql?(available_product[:repository]) && r[:enabled] != 0 }
    if ProductVersion.new(available_product[:edition]) < ProductVersion.new(p.version)
      print "Found obsolete repository #{available_product[:repository]}" unless options[:quiet]
      if options[:non_interactive] || options[:disable_repos]
        print "... disabling\n" unless options[:quiet]
        SUSE::Connect::Migration::disable_repository available_product[:repository]
      else
        while true
          print "\nDisable obsolete repository #{available_product[:repository]} [y/n] (y): "
          choice = gets.chomp
          if choice.eql?('n') || choice.eql?('N')
            print "\n"
            break
          end
          if  choice.eql?('y') || choice.eql?('Y')|| choice.eql?('')
            print "... disabling\n"
            SUSE::Connect::Migration::disable_repository available_product[:repository]
            break
          end
        end
      end
    end
  end

  print "Adding service #{service[:name]}\n" if options[:verbose]
  SUSE::Connect::Migration::add_service service[:url], service[:name]

  # store the base product version
  if p.base
    base_product_version = p.version
  end

end

cmd = "zypper " +
      (base_product_version ? "--releasever #{base_product_version} " : "") +
      "ref -f"
print "\nExecuting '#{cmd}'\n\n" unless options[:quiet]
result = system cmd

cmd = "zypper " +
      (base_product_version ? "--releasever #{base_product_version} " : "") +
      (options[:non_interactive] ? "--non-interactive " : "") +
      (options[:verbose] ? "--verbose " : "") +
      (options[:quiet] ? "--quiet " : "") +
      " dist-upgrade " +
      (options[:allow_vendor_change] ? "--allow-vendor-change " : "--no-allow-vendor-change ") +
      (options[:auto_agree] ? "--auto-agree-with-licenses " : "") +
      (options[:debug_solver] ? "--debug-solver " : "") +
      (options[:recommends] ? "--recommends " : "--no-recommends ") +
      (options[:replacefiles] ? "--replacefiles " : "") +
      (options[:details] ? "--details " : "") +
      (options[:download] ? "--download #{options[:download]} " : "") +
      (options[:repo].map { |r| "--repo #{r}" }.join(" ")) +
      (options[:from].map { |r| "--from #{r}" }.join(" "))
print "\nExecuting '#{cmd}'\n\n" unless options[:quiet]
result = system cmd

if pre_snapshot_num > 0
  cmd = "snapper create --type post --pre-number #{pre_snapshot_num} --print-number --description 'post migration'"
  print "\nExecuting '#{cmd}'\n\n" unless options[:quiet]
  post_snapshot_num = `#{cmd}`.to_i
end

exit 1 unless result


