#!/usr/bin/ruby

require 'optparse'
require "suse/connect"

options = {
    :verbose => false,
    :quiet => false,
    :non_interactive => false,
    :query => false,
    :migration => 0,
}

OptionParser.new do |opts|
  opts.banner = "Usage: zypper migration [options]"

  opts.on("-v", "--[no-]verbose", "Increase verbosity") do |v|
    options[:verbose] = v
  end

  opts.on("-q", "--[no-]quiet", "Suppress normal output, print only error messages") do |q|
    options[:quiet] = q
  end

  opts.on("-n", "--non-interactive", "Do not ask anything, use default answers automatically") do |n|
    options[:non_interactive] = n
  end

  opts.on("--query", "Query available migration options and exit") do |q|
    options[:query] = q
  end

  opts.on("--migration N", OptionParser::DecimalInteger, "Select migration option N") do |n|
    options[:migration] = n
  end

end.parse!


zypper_product = SUSE::Connect::Zypper::installed_products

if options[:verbose]
  print "Installed products:\n"
  zypper_product.each {|p|
    printf "  %-25s %s\n", "#{p.identifier}/#{p.version}/#{p.arch}", p.summary
  }
  print "\n"
end

connect_products = zypper_product.map {|p| SUSE::Connect::Remote::Product.new(
    :arch => p.arch,
    :identifier => p.identifier,
    :version => p.version,
    :release_type => p.release_type
) }

migrations = SUSE::Connect::YaST.system_migrations connect_products

if migrations.length == 0
  print "No migration available\n\n" unless options[:quiet]
  exit 0
end

migration_num = options[:migration]
if options[:non_interactive] && migration_num == 0
  # select the first option
  migration_num = 1
end


while migration_num <= 0 || migration_num > migrations.length do 
  print "Available migrations:\n\n"
  migrations.each_with_index do |migration, index|
    printf "   %2d |", index + 1
    migration.each do |p|
      print " #{p.identifier}/#{p.version}/#{p.arch}"
    end
    print "\n"
  end
  print "\n"
  if options[:query]
    exit 0
  end
  while migration_num <= 0 || migration_num > migrations.length do
    print "(num/q):"
    choice = gets.chomp 
    exit 0 if choice.eql? "q"
    migration_num = choice.to_i
  end
end

migration = migrations[migration_num - 1]

cmd = "zypper " +
      (options[:non_interactive] ? "--non-interactive " : "") +
      (options[:verbose] ? "--verbose " : "") +
      (options[:quiet] ? "--quiet " : "") +
      " refresh"
print "\nExecuting '#{cmd}'\n\n" unless options[:quiet]
exit 1 unless system cmd

cmd = "zypper " +
      (options[:non_interactive] ? "--non-interactive " : "") +
      (options[:verbose] ? "--verbose " : "") +
      (options[:quiet] ? "--quiet " : "") +
      " update"
print "\nExecuting '#{cmd}'\n\n" unless options[:quiet]
exit 1 unless system cmd

migration.each do |p|
  print "Upgrading product #{p.identifier}/#{p.version}/#{p.arch}\n" unless options[:quiet]
  service = SUSE::Connect::YaST.upgrade_product p

  if service[:obsoleted_service_name]
    print "Removing service #{service[:obsoleted_service_name]}\n" if options[:verbose]
    SUSE::Connect::Zypper::remove_service service[:obsoleted_service_name]
  end

  print "Adding service #{service[:name]}\n" if options[:verbose]
  SUSE::Connect::System::add_service service

end

cmd = "zypper " +
      (options[:non_interactive] ? "--non-interactive " : "") +
      (options[:verbose] ? "--verbose " : "") +
      (options[:quiet] ? "--quiet " : "") +
      " dist-upgrade"
print "\nExecuting '#{cmd}'\n\n" unless options[:quiet]
exit 1 unless system cmd


